name: CD Pipeline - Deploy to Kubernetes

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend

jobs:
  # Build and Push Images
  build-and-push:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    outputs:
      backend-image: ${{ steps.image.outputs.backend-image }}
      frontend-image: ${{ steps.image.outputs.frontend-image }}
      version: ${{ steps.image.outputs.version }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-

    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Output image information
      id: image
      run: |
        VERSION=${GITHUB_REF#refs/*/}
        if [[ $VERSION == "main" ]]; then VERSION="latest"; fi
        echo "backend-image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:$VERSION" >> $GITHUB_OUTPUT
        echo "frontend-image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:$VERSION" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT

  # Deploy to Development Environment
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: development
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        # TODO: Configure kubectl with your cluster credentials
        # Option 1: Use kubeconfig from secrets
        # mkdir -p ~/.kube
        # echo "${{ secrets.KUBE_CONFIG_DEV }}" | base64 -d > ~/.kube/config
        
        # Option 2: Use cloud provider CLI (Azure/AWS/GCP)
        # az aks get-credentials --resource-group ${{ secrets.AZURE_RG }} --name ${{ secrets.AKS_CLUSTER_NAME }}
        
        echo "Kubectl configuration would go here"
        echo "Current context: $(kubectl config current-context || echo 'Not configured')"

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Deploy with Helm - Development
      run: |
        # Create namespace if it doesn't exist
        kubectl create namespace user-onboard-dev --dry-run=client -o yaml | kubectl apply -f -
        
        # Deploy using Helm with development values
        helm upgrade --install user-onboard-dev ./infrastructure/helm-chart/user-onboard \
          --namespace user-onboard-dev \
          --set global.registry=${{ env.REGISTRY }} \
          --set backend.image.tag=${{ needs.build-and-push.outputs.version }} \
          --set frontend.image.tag=${{ needs.build-and-push.outputs.version }} \
          --set database.type=mssql \
          --set database.external.enabled=true \
          --set database.external.jdbcUrl="${{ secrets.DEV_DB_JDBC_URL }}" \
          --set database.external.username="${{ secrets.DEV_DB_USERNAME }}" \
          --set frontend.ingress.hosts[0].host=user-onboard-dev.your-domain.com \
          --wait --timeout=10m
        
        echo "Deployment completed successfully"

    - name: Verify deployment
      run: |
        kubectl get pods -n user-onboard-dev
        kubectl get svc -n user-onboard-dev
        kubectl get ingress -n user-onboard-dev

  # Deploy to Staging Environment
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-dev]
    environment: staging
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure kubectl for staging
      run: |
        # TODO: Configure kubectl for staging cluster
        echo "Staging kubectl configuration would go here"

    - name: Deploy with Helm - Staging
      run: |
        kubectl create namespace user-onboard-staging --dry-run=client -o yaml | kubectl apply -f -
        
        helm upgrade --install user-onboard-staging ./infrastructure/helm-chart/user-onboard \
          --namespace user-onboard-staging \
          --set global.registry=${{ env.REGISTRY }} \
          --set backend.image.tag=${{ needs.build-and-push.outputs.version }} \
          --set frontend.image.tag=${{ needs.build-and-push.outputs.version }} \
          --set database.type=mssql \
          --set database.external.enabled=true \
          --set database.external.jdbcUrl="${{ secrets.STAGING_DB_JDBC_URL }}" \
          --set database.external.username="${{ secrets.STAGING_DB_USERNAME }}" \
          --set frontend.ingress.hosts[0].host=user-onboard-staging.your-domain.com \
          --set backend.replicaCount=2 \
          --set frontend.replicaCount=2 \
          --wait --timeout=15m

  # Deploy to Production Environment
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    environment: production
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure kubectl for production
      run: |
        # TODO: Configure kubectl for production cluster
        echo "Production kubectl configuration would go here"

    - name: Deploy with Helm - Production
      run: |
        kubectl create namespace user-onboard-prod --dry-run=client -o yaml | kubectl apply -f -
        
        # Production deployment with high availability
        helm upgrade --install user-onboard-prod ./infrastructure/helm-chart/user-onboard \
          --namespace user-onboard-prod \
          --set global.registry=${{ env.REGISTRY }} \
          --set backend.image.tag=${{ needs.build-and-push.outputs.version }} \
          --set frontend.image.tag=${{ needs.build-and-push.outputs.version }} \
          --set database.type=${{ secrets.PROD_DB_TYPE }} \
          --set database.external.enabled=true \
          --set database.external.jdbcUrl="${{ secrets.PROD_DB_JDBC_URL }}" \
          --set database.external.username="${{ secrets.PROD_DB_USERNAME }}" \
          --set frontend.ingress.hosts[0].host=user-onboard.your-domain.com \
          --set backend.replicaCount=3 \
          --set frontend.replicaCount=3 \
          --set backend.autoscaling.enabled=true \
          --set backend.autoscaling.minReplicas=3 \
          --set backend.autoscaling.maxReplicas=10 \
          --set monitoring.prometheus.enabled=true \
          --set monitoring.grafana.enabled=true \
          --wait --timeout=20m

    - name: Production deployment verification
      run: |
        echo "Verifying production deployment..."
        kubectl get pods -n user-onboard-prod
        kubectl get hpa -n user-onboard-prod
        
        # Wait for all pods to be ready
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=user-onboard -n user-onboard-prod --timeout=300s
        
        echo "Production deployment completed successfully!"

# Required GitHub Secrets for this workflow:
# - KUBE_CONFIG_DEV: Base64 encoded kubeconfig for development cluster
# - KUBE_CONFIG_STAGING: Base64 encoded kubeconfig for staging cluster  
# - KUBE_CONFIG_PROD: Base64 encoded kubeconfig for production cluster
# - DEV_DB_JDBC_URL: Development database JDBC URL
# - DEV_DB_USERNAME: Development database username
# - DEV_DB_PASSWORD: Development database password (referenced in K8s secrets)
# - STAGING_DB_JDBC_URL: Staging database JDBC URL
# - STAGING_DB_USERNAME: Staging database username
# - STAGING_DB_PASSWORD: Staging database password
# - PROD_DB_TYPE: Production database type (mssql or oracle)
# - PROD_DB_JDBC_URL: Production database JDBC URL
# - PROD_DB_USERNAME: Production database username
# - PROD_DB_PASSWORD: Production database password
