apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "user-onboard.fullname" . }}-backend
  labels:
    {{- include "user-onboard.labels" . | nindent 4 }}
    app.kubernetes.io/component: backend
spec:
  {{- if not .Values.backend.autoscaling.enabled }}
  replicas: {{ .Values.backend.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "user-onboard.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: backend
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
      labels:
        {{- include "user-onboard.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: backend
    spec:
      {{- with .Values.global.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "user-onboard.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: backend
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.global.registry }}/{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.backend.service.targetPort }}
              protocol: TCP
          env:
            # Database Configuration - Agnostic for MSSQL/Oracle
            - name: DB_TYPE
              value: {{ .Values.database.type | quote }}
            - name: JDBC_URL
              value: {{ .Values.database.external.jdbcUrl | quote }}
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.external.existingSecret }}
                  key: {{ .Values.database.external.secretKeys.username }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.external.existingSecret }}
                  key: {{ .Values.database.external.secretKeys.password }}
            - name: HIBERNATE_DIALECT
              value: {{ .Values.database.hibernate.dialect | quote }}
            
            # JWT Configuration
            - name: JWT_PRIVATE_KEY_PATH
              value: "{{ .Values.backend.env.jwtKeyPath }}/private_key.pem"
            - name: JWT_PUBLIC_KEY_PATH
              value: "{{ .Values.backend.env.jwtKeyPath }}/public_key.pem"
            
            # RabbitMQ Configuration
            {{- if .Values.rabbitmq.external.enabled }}
            - name: RABBITMQ_HOST
              value: {{ .Values.rabbitmq.external.host | quote }}
            - name: RABBITMQ_PORT
              value: {{ .Values.rabbitmq.external.port | quote }}
            - name: RABBITMQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.rabbitmq.external.existingSecret }}
                  key: username
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.rabbitmq.external.existingSecret }}
                  key: password
            {{- else }}
            - name: RABBITMQ_HOST
              value: "{{ include "user-onboard.fullname" . }}-rabbitmq"
            - name: RABBITMQ_PORT
              value: "5672"
            - name: RABBITMQ_USERNAME
              value: "guest"
            - name: RABBITMQ_PASSWORD
              value: "guest"
            {{- end }}
            
            # Spring Configuration
            - name: SPRING_PROFILES_ACTIVE
              value: {{ .Values.backend.env.springProfile | quote }}
            - name: EMAIL_ENABLED
              value: {{ .Values.backend.env.emailEnabled | quote }}
          
          volumeMounts:
            - name: jwt-keys
              mountPath: {{ .Values.backend.env.jwtKeyPath }}
              readOnly: true
            - name: tmp
              mountPath: /tmp
            - name: cache
              mountPath: /app/cache
          
          {{- if .Values.backend.healthCheck.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.backend.healthCheck.path }}/liveness
              port: http
            initialDelaySeconds: {{ .Values.backend.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.backend.healthCheck.periodSeconds }}
            timeoutSeconds: 10
            failureThreshold: 3
          
          readinessProbe:
            httpGet:
              path: {{ .Values.backend.healthCheck.path }}/readiness
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          {{- end }}
          
          resources:
            {{- toYaml .Values.backend.resources | nindent 12 }}
      
      volumes:
        - name: jwt-keys
          secret:
            secretName: {{ .Values.backend.security.jwtSecret }}
            defaultMode: 0400
        - name: tmp
          emptyDir: {}
        - name: cache
          emptyDir: {}
      
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

